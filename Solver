import java.util.ArrayList;

public class Solver {
	MinPQ<Node> PQ;
	MinPQ<Node> swappedPQ;
	Node currentNode;
	Node swappedCurrentNode;
	ArrayList<Board> solution;
	ArrayList<Board> previouslyChecked;
	ArrayList<Board> previouslyCheckedSwapped;
	boolean solved;
	
	//find a solution to the initial board (using the A* algorithm)
	public Solver(Board initial) {
		solution = new ArrayList<Board>();
		previouslyChecked = new ArrayList<Board>();
		previouslyCheckedSwapped = new ArrayList<Board>();
		PQ = new MinPQ<Node>(10);
		swappedPQ = new MinPQ<Node>(10);
		PQ.insert(new Node(initial, 0, null));
		swappedPQ.insert(new Node(initial.twin(), 0, null));
		solved = false;
		
		currentNode = PQ.delMin();
		swappedCurrentNode = swappedPQ.delMin();
		while(!(currentNode.board.isGoal() || swappedCurrentNode.board.isGoal())) {
			previouslyChecked.add(currentNode.board);
			previouslyCheckedSwapped.add(swappedCurrentNode.board);
			for(Board b : currentNode.board.neighbors()) {
				for(Board toCheck : previouslyChecked) {
					if(!b.equals(toCheck)) {
						if (currentNode.prev == null || !b.equals(currentNode.prev.board)) {
							PQ.insert(new Node(b, currentNode.movesDeep + 1, currentNode));
						}
					}
				}
				
			}
			for(Board b : swappedCurrentNode.board.neighbors()) {
				for(Board toCheck : previouslyCheckedSwapped) {
					if(!b.equals(toCheck)) {
						if (swappedCurrentNode.prev == null || !b.equals(swappedCurrentNode.prev.board)) {
							swappedPQ.insert(new Node(b, swappedCurrentNode.movesDeep + 1, swappedCurrentNode));
						}
					}
				}
			}
			currentNode = PQ.delMin();
			swappedCurrentNode = swappedPQ.delMin();
		
		}
		
		if(currentNode.board.isGoal()) {
			solved = true;
			solution.add(currentNode.board);
			while(!currentNode.board.equals(initial)) {
				currentNode = currentNode.prev;
				solution.add(0, currentNode.board);
			}
		} 
		
		
		
		
	}
	
	//is the initial board solvable?(see below)
	public boolean isSolvable() {
		return(solved);
	}
	
	//min number of moves to solve the initial board; -1 if unsolvable
	public int moves() {
		if(!isSolvable()) {
			return -1;
		}
		return currentNode.movesDeep;
	}
	
	//sequence of boards in a shortest solution; null if unsolvable
	public Iterable<Board> solution(){
		if(!isSolvable()) {
			return null;
		}
		return solution;
	}
	
	
	private class Node implements Comparable <Node>{
		Board board;
		int movesDeep;
		Node prev;
		
		public Node(Board b, int moves, Node p){
			board = b;
			movesDeep = moves;
			prev = p;
		}
		
		public int manhattanPriority() {
			return(this.board.manhattan() + movesDeep);
		}
		
		public int hammingPriority() {
			return(this.board.hamming() + movesDeep);
		}
		
		@Override
		public int compareTo(Solver.Node other) {
			if(this.manhattanPriority() > other.manhattanPriority()) {
				return 1;
			}
			if(this.manhattanPriority() < other.manhattanPriority()) {
				return -1;
			}
			return 0;
			
		}
	}
	
	//test client(see below)
	public static void main(String[] args) {
		int counter = 0;
		int[][] tiles = new int[3][3];
		
		tiles[0][0] = 4;
		tiles[0][1] = 1;
		tiles[0][2] = 2;
		tiles[1][0] = 0;
		tiles[1][1] = 5;
		tiles[1][2] = 3;
		tiles[2][0] = 7;
		tiles[2][1] = 8;
		tiles[2][2] = 6;
		
		Board board = new Board(tiles);
		Solver solver = new Solver(board);
		if(solver.isSolvable()) {
			for(Board b : solver.solution()) {
				System.out.println(b);
			}
		} else {
			System.out.println("That board is not solvable!");
		}
		

	}

}
